package ${packageName}.service.impl;

import cn.hutool.core.bean.BeanUtil;
import com.ibi.common.utils.StringUtils;
import com.ibi.common.mybatisplus.page.PageQuery;
import com.ibi.common.mybatisplus.page.TableDataInfo;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${packageName}.domain.bo.${ClassName}Bo;
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.entity.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;
import com.ptd.equipmentmanagement.common.utils.R_BaseVo;

import java.util.List;
import java.util.Collection;
import java.util.function.Consumer;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@RequiredArgsConstructor
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper,${ClassName}> implements I${ClassName}Service {

    /**
     * 分页查询${functionName}列表
     */
    @Override
    public TableDataInfo<${ClassName}Vo> queryPageList(${ClassName}Bo bo, PageQuery pageQuery) {
        LambdaQueryWrapper<${ClassName}> lqw = buildQueryWrapper(bo);
        Page<${ClassName}Vo> result = baseMapper.selectVoPage(pageQuery.build(), lqw);
        return TableDataInfo.build(R_BaseVo.buildEntity(result, ${ClassName}Vo.class, getConsumer()));
    }

    /**
     * 查询${functionName}列表
     */
    @Override
    public List<${ClassName}Vo> queryList(${ClassName}Bo bo) {
        LambdaQueryWrapper<${ClassName}> lqw = buildQueryWrapper(bo);
        List<${ClassName}Vo> resultList = baseMapper.selectVoList(lqw);
        return R_BaseVo.buildEntity(resultList, ${ClassName}Vo.class, getConsumer());
    }


    private LambdaQueryWrapper<${ClassName}> buildQueryWrapper(${ClassName}Bo bo) {
        LambdaQueryWrapper<${ClassName}> lqw = Wrappers.lambdaQuery();
#foreach($column in $columns)
#if($column.query)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#set($mpMethod=$column.queryType.toLowerCase())
#if($queryType != 'BETWEEN')
#if($javaType == 'String')
#set($condition='StringUtils.isNotBlank(bo.get'+$AttrName+'())')
#else
#set($condition='bo.get'+$AttrName+'() != null')
#end
        lqw.$mpMethod($condition, ${ClassName}::get$AttrName, bo.get$AttrName());
#else
        lqw.between(params.get("begin$AttrName") != null && params.get("end$AttrName") != null,
            ${ClassName}::get$AttrName ,params.get("begin$AttrName"), params.get("end$AttrName"));
#end
#end
#end
        return lqw;
    }

    /**
     * 查询${functionName}
     */
    @Override
    public ${ClassName}Vo queryById(${pkColumn.javaType} ${pkColumn.javaField}){
        ${ClassName}Vo ${className} = baseMapper.selectVoById(${pkColumn.javaField});
        return  R_BaseVo.buildEntity(${className}, ${ClassName}Vo.class, getConsumer());
    }

    private Consumer<${ClassName}Vo> getConsumer() {
        return record -> {
        };
    }

    /**
     * 新增${functionName}
     */
    @Override
    public Boolean insertByBo(${ClassName}Bo bo) {
        ${ClassName} add = BeanUtil.toBean(bo, ${ClassName}.class);
        boolean flag = baseMapper.insert(add) > 0;
#set($pk=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
        if (flag) {
            bo.set$pk(add.get$pk());
        }
        return flag;
    }

    /**
     * 修改${functionName}
     */
    @Override
    public Boolean updateByBo(${ClassName}Bo bo) {
        ${ClassName} update = BeanUtil.toBean(bo, ${ClassName}.class);
        return baseMapper.updateById(update) > 0;
    }

    /**
     * 删除${functionName}
     */
    @Override
    public Boolean deleteById(${pkColumn.javaType} id) {
        return baseMapper.deleteById(id) > 0;
    }

    /**
     * 批量删除${functionName}
     */
    @Override
    public Boolean deleteIds(Collection<${pkColumn.javaType}> ids) {
        return baseMapper.deleteBatchIds(ids) > 0;
    }
}
